# -*- text -*-
######################################################################
#
#  Sample virtual server for receiving a CoA or Disconnect-Request packet.
#

#  Listen on the CoA port.
#
#  This uses the normal set of clients, with the same secret as for
#  authentication and accounting.
#
listen {
	type = coa
	ipaddr = *
	port = 3799
	virtual_server = coa
}

server coa {
	#  When a packet is received, it is processed through the
	#  recv-coa section.  This applies to *both* CoA-Request and
	#  Disconnect-Request packets.
	recv-coa {
		#  CoA && Disconnect packets can be proxied in the same
		#  way as authentication or accounting packets.
		#  Just set Proxy-To-Realm, or Home-Server-Pool, and the
		#  packets will be proxied.

		#  Do proxying based on realms here.  You don't need
		#  "IPASS" or "ntdomain", as the proxying is based on
		#  the Operator-Name attribute.  It contains the realm,
		#  and ONLY the realm (prefixed by a '1')
		suffix
		# 提取 Token 属性并传递给脚本
    # 检查脚本返回结果
    if (("%{exec:/usr/bin/python3 /etc/freeradius/3.0/code/validate_token.py %{Token}}" == "ok")) {
        # Token 校验成功时，更新控制字段和额外的消息
        update control {
            Response-Packet-Type := CoA-ACK
    Tmp-String-0 := "%{sql:UPDATE radacct SET acctupdatetime = NOW() WHERE username = '%{User-Name}' AND acctsessionid = '%{Acct-Session-Id}' AND acctstoptime IS NULL}"
    
                     }
    } else {
        reject
    }

		#  Insert your own policies here.
		ok
	}

	#  When a packet is sent, it is processed through the
	#  send-coa section.  This applies to *both* CoA-Request and
	#  Disconnect-Request packets.
	send-coa {
	 # 根据 Token 验证的结果设置不同的响应消息
    if ("%{control:Response-Packet-Type}" == "CoA-ACK") {
        # 调用分片逻辑的 exec 模块
		token_time
		policy_reply
		token_nonce
        # Token 校验成功时返回分片消息
        update reply {
            Reply-Message := "Token验证成功"
		   ACK-COUNT := "%{reply:ACK-COUNT}"
    CURRENT-ACK := "%{reply:CURRENT-ACK}"
    &Token := "%{reply:Token}"
        }
    } else {
        # Token 校验失败时返回错误消息
        update reply {
            Reply-Message := "Token验证失败"
        }
    }
		#  Sample module.
		ok
	}

	#  You can use pre-proxy and post-proxy sections here, too.
	#  They will be processed for sending && receiving proxy packets.
}
